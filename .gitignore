# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDEs and editors
.vscode/
.idea/
*.swp
*.swo
*~

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for production applications. However, you may want to use
#   poetry.lock for tracking dependencies for development, and use requirements.txt for production.
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# SageMath parsed files
*.sage.py

# Environments
.env
.env.*
.venv

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project's gitignore.
#  For PyCharm Community Edition, use 'community' instead of 'pycharm'
.idea/

# Application-specific files
# SQLite database files
*.db
*.sqlite
*.sqlite3
risk_register.db

# Log files
*.log
logs/

# Temporary files
*.tmp
*.temp
.DS_Store
Thumbs.db

# FastAPI / uvicorn
.pid

# Backup files
*.bak
*.backup

# Local development files
.env.local
.env.development
.env.test

# Docker
.dockerignore

# Node.js (if frontend is added later)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build artifacts
*.tar.gz
*.zip

# Documentation builds
docs/_build/
docs/build/

# Terraform
# State files - contain sensitive infrastructure state
*.tfstate
*.tfstate.*

# Variable files - often contain sensitive configuration
*.tfvars
!terraform.tfvars.example

# Terraform cache and temporary files
.terraform/
.terraform.lock.hcl

# Terraform plan files - may contain sensitive data
*.tfplan
tfplan

# Terraform crash logs
crash.log
crash.*.log

# Terraform CLI configuration
.terraformrc
terraform.rc
